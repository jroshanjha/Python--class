ðŸ“‚ Part 1: File Handling in Python
1. Opening a File

file = open('example.txt', 'r')  # Modes: 'r', 'w', 'a', 'b', 'x', 't'
Mode	Description
'r'	Read (default)
'w'	Write (overwrites existing)
'a'	Append
'x'	Create (fails if file exists)
'b'	Binary mode (e.g., images)
't'	Text mode (default)

2. Reading from a File

f = open('example.txt', 'r')
print(f.read())           # Reads entire file
print(f.readline())       # Reads one line
print(f.readlines())      # Returns a list of lines
f.close()

3. Writing to a File

f = open('example.txt', 'w')
f.write("Hello World!\n")
f.writelines(["Line1\n", "Line2\n"])
f.close()

4. Appending to a File

f = open('example.txt', 'a')
f.write("This line is added.")
f.close()

5. Using with Statement (Best Practice)

with open('example.txt', 'r') as file:
    content = file.read()
    print(content)
# No need to manually close the file

6. Working with Binary Files

with open('image.jpg', 'rb') as f:
    img = f.read()

with open('copy.jpg', 'wb') as f:
    f.write(img)
ðŸ“Œ Real-World Applications
Logging user activity

Reading configurations or CSV/JSON data

Generating reports

File upload/download systems

ðŸ’¥ Part 2: Exception Handling in Python
1. Basic Try-Except

try:
    num = int(input("Enter a number: "))
    print(10 / num)
except ZeroDivisionError:
    print("Cannot divide by zero.")
except ValueError:
    print("Invalid input.")

2. Using else with try

try:
    val = int(input("Enter a number: "))
except ValueError:
    print("Invalid input!")
else:
    print(f"Valid number: {val}")
3. Using finally

try:
    f = open('data.txt', 'r')
    print(f.read())
except FileNotFoundError:
    print("File not found.")
finally:
    f.close()

4. Handling Multiple Exceptions

try:
    x = int("ten")
    y = 10 / 0
except (ValueError, ZeroDivisionError) as e:
    print("Error:", e)

5. Raising Custom Exceptions

def check_age(age):
    if age < 18:
        raise ValueError("Age must be 18 or older.")
    return "Access granted"

try:
    print(check_age(16))
except ValueError as e:
    print(e)
ðŸ“Œ Common Exceptions
Exception	Description
ValueError	Invalid value (e.g., int("abc"))
TypeError	Wrong type of argument
ZeroDivisionError	Division by zero
FileNotFoundError	File operation on a missing file
IndexError	Accessing out-of-bound index
KeyError	Accessing missing dictionary key
AttributeError	Invalid attribute access

ðŸ§  Mini Exercises
1. Write a script to:
Read a file

If it doesn't exist, create one and write "Hello"

Then append " World!" and display contents

2. Create a program to:
Input age from the user

Raise a ValueError if age < 18

Else write to a file: "User age is X"

âœ… Summary
Concept	Usage
open()	Open files for read/write
with open(...)	Auto-closes file (best practice)
try/except	Handle errors gracefully
finally	Always execute cleanup
raise	Raise your own exceptions

Would you like a PDF, quiz, cheat sheet, or interactive exercises in Streamlit for this topic?






You said:
. Write a script to:
Read a file

If it doesn't exist, create one and write "Hello"

Then append " World!" and display contents

2. Create a program to:
Input age from the user

Raise a ValueError if age < 18

Else write to a file: "User age is X"


ChatGPT said:
Here are the two scripts as requested:

âœ… 1. Read a file â†’ If it doesn't exist, create it and write "Hello" â†’ Append " World!" â†’ Display contents

filename = "greeting.txt"

try:
    # Try to open file in read mode
    with open(filename, 'r') as file:
        content = file.read()
        print("File exists. Current content:", content)

except FileNotFoundError:
    # If file doesn't exist, create and write "Hello"
    with open(filename, 'w') as file:
        file.write("Hello")
    print(f"{filename} not found. Created with 'Hello'.")

# Append " World!" to the file
with open(filename, 'a') as file:
    file.write(" World!")

# Read final content
with open(filename, 'r') as file:
    final_content = file.read()
    print("Final content:", final_content)

âœ… 2. Age validation â†’ Raise ValueError if < 18 â†’ Else write to file

try:
    age = int(input("Enter your age: "))
    if age < 18:
        raise ValueError("Age must be 18 or older to proceed.")
    
    # Write to file if age is valid
    with open("user_age.txt", 'w') as file:
        file.write(f"User age is {age}")
    print("Age saved successfully!")

except ValueError as ve:
    print("Error:", ve)
Would you like:

âœ… Both of these in a PDF?

ðŸš€ A Streamlit version of these mini apps?

ðŸ§  Some quiz questions based on these exercises?

Let me know how you'd like to proceed!






You said:
ðŸ“Œ Real-World Applications
Logging user activity

Reading configurations or CSV/JSON data

Generating reports

File upload/download systems


ChatGPT said:
Excellent! Here's how File Handling and Exception Handling apply in real-world scenarios, with Python code examples for each use case:

ðŸ“Œ 1. Logging User Activity
Use case: Keep a log of what users do in your application.


import datetime

def log_activity(user, action):
    with open("activity.log", "a") as log_file:
        log_file.write(f"{datetime.datetime.now()} - {user}: {action}\n")

# Example usage
log_activity("john_doe", "Logged in")
log_activity("john_doe", "Viewed dashboard")
ðŸ“Œ 2. Reading Configurations (CSV/JSON)
âœ… JSON Config Example:

import json

try:
    with open("config.json", "r") as file:
        config = json.load(file)
        print("App Name:", config["app_name"])
except FileNotFoundError:
    print("Config file not found. Please create config.json.")
Sample config.json:


Edit
{
  "app_name": "MyApp",
  "version": "1.0",
  "debug": true
}
âœ… CSV File Example:


import csv

try:
    with open("users.csv", "r") as file:
        reader = csv.DictReader(file)
        for row in reader:
            print(row["username"], "=>", row["email"])
except FileNotFoundError:
    print("users.csv not found.")

ðŸ“Œ 3. Generating Reports

data = {
    "total_users": 200,
    "active_today": 37
}

try:
    with open("report.txt", "w") as report:
        for key, value in data.items():
            report.write(f"{key.replace('_', ' ').title()}: {value}\n")
    print("Report generated!")
except Exception as e:
    print("Failed to generate report:", e)

ðŸ“Œ 4. File Upload/Download Simulation

def upload_file(source_path, destination_path):
    try:
        with open(source_path, "rb") as src, open(destination_path, "wb") as dest:
            dest.write(src.read())
        print("File uploaded successfully!")
    except FileNotFoundError:
        print("Upload failed. Source file not found.")
    except Exception as e:
        print("Unexpected error:", e)

# Example usage
upload_file("sample_upload.txt", "uploaded/sample_upload.txt")
